// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        canvas_size: { value: [ 750.0, 1624.0 ] }
        center: { value: [ 0.5, 0.5 ] }
        // 波形速度
        wave_speed: { value: 10.0 }
        // 波形宽度
        wave_width: { value: 1.0 }
        // 波形高度
        wave_height: { value: 0.1 }
        // 波纹半径
        wave_r: { valur: 0.3}
        
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <cc-global>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  uniform sampler2D lyrics_texture;


  uniform ARGS{
    vec2 center;
    vec2 canvas_size;
    float wave_speed;
    float wave_height;
    float wave_r;
    float wave_width;
   
  };

  /** 
    画圆
    pos: 圆中心点位置
    r: 半径
    blur: 光圈
    uv: 视图点
  */
  float solidCircle(vec2 pos, float r, float blur, vec2 uv){
      float l = length(uv-pos);
      return smoothstep(r, r-blur, l);
  }
  /**
    * 画圈
    * pos: 中心点
    * r1: 外圈半径
    * r2: 内圈半径
    * uv: 点
  */
  float borderCircle(vec2 pos, float r1, float r2, float blur, vec2 uv ) {
    float s1 = solidCircle(pos, r1, blur, uv);
    float s2 = solidCircle(pos, r2, blur, uv);
    return s1 - s2;

  }

  vec3 blendAdd(vec3 base, vec3 blend) {
	return min(base+blend,vec3(1.0));
}

  vec4 blendAdd(vec4 baseColor, vec4 overlayColor) {
    return clamp(baseColor + overlayColor, 0.0, 1.0);
  }

  vec4 blendFilter(vec4 baseColor, vec4 overlayColor) {
    return vec4(1.0) - (vec4(1.0) - baseColor) * (vec4(1.0) - overlayColor);
  }
  

  vec4 blendOverlay(vec4 baseColor, vec4 overlayColor) {
    return overlayColor * baseColor + (vec4(1.0) - overlayColor) * (vec4(2.0) * baseColor - vec4(1.0));
  }

  vec3 blendNormal(vec3 base, vec3 blend) {
    return blend;
  }

  vec3 blendNormal(vec3 base, vec3 blend, float opacity) {
    return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));
  }

  #define sqr(x) x*x
  const float PI = 3.1415926;
   float Guass(vec2 p, float sigma) 
   {
	  return ( 1./(2.*PI*sqr(sigma)) )
        *exp( -(sqr(p.x)+sqr(p.y))/(2.*pow(sigma, 2.)) );
   }
  vec4 rgbaGaussianBlur(sampler2D Tex, vec2 UV, vec2 Size, float radius) 
		{
      vec4 sum = vec4(0.0);
      vec2 normalizedSize = vec2(1.0 / Size);
      vec4 color = vec4(0.0);
      float total_gauss = 0.0;

      float sigma = radius; //6.0;
      // 进行二维矩阵遍历
      for (float x = -10.0; x <= 10.0; x++) {
          for (float y = -10.0; y <= 10.0; y++) {
            // 计算对应的纹理坐标
            float gauss = Guass(vec2(x, y), sigma);
            sum += texture2D(Tex, UV + normalizedSize * vec2(x, y)) * gauss;
            // 计算出高斯权重
            total_gauss += gauss;
          }
      }
			
      sum = sum / total_gauss;
      return vec4(1., 1., 1., sum.a);
    }
  float easeInExpo(float x) {
    return x == 0.0 ? 0.0 : pow(2., 10. * x - 10.);
  }

  float easeInOutCirc(float x) {
    return x < 0.5 ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2. : (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;
  }

  float easeOutCubic(float x) {
    return 1.0 - pow(1.0 - x, 3.0);
  }

  // 波纹偏移量
  vec2 getWaveOffset(vec2 center, vec2 uv, float wave_width, float wave_height, float wave_speed, float wave_r) {
    vec2 distance_vec = center - uv;
    float distance = length(center - uv);
    float waveRFactor = clamp(wave_r - distance, 0.,1.) / wave_r; // 0-1, wave_r 0-1  waveRFactor 0-1
		float sin_factor = sin(distance * 100. * wave_width - cc_time.x * wave_speed) * 0.1 * wave_height * 1. / (1. + distance) * waveRFactor; // 水波纹往外波动,  // 水波从里到外波长和频率不变，振幅变小，且和半径成反比（1/r）
		vec2 offset = normalize(distance_vec) * sin_factor;
		vec2 result_uv = offset + v_uv0;
    return result_uv;
  }

  // 缩放模型
  mat2 scale(vec2 scale){
      return mat2(scale.x,0.0,
                  0.0,scale.y);
  }

  vec2 getScaleUV(vec2 uv, vec2 center, float scaleFactor) {
    vec2 st = uv - center;
    st = scale(vec2(1. / scaleFactor)) * st;
    st = st + center;
    return st;
  }



  void main() {
		vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0); // 以y为单位长度
    // 1、水波纹 调参数 center = [0.5, 0.4], wave_speed = 10.0, wave_width = 1.0, wave_height = 1.0, wave_r = 0.3
    vec2 wave_uv = getWaveOffset(center * scalex_vec, v_uv0 * scalex_vec , wave_width, wave_height, wave_speed, wave_r);
    
    // // 2、横向波纹 调参数 center = [0.0, 0.4], wave_speed = 10.0, wave_width = 1.0, wave_height = 1.0, wave_r = 1.0
    // vec2 wave_uv = getWaveOffset(center * scalex_vec, vec2((v_uv0 * scalex_vec).x, (center * scalex_vec).y) , wave_width, wave_height, wave_speed, wave_r);

    // // 3、纵向波纹 调参数 center = [0.5, 0.0], wave_speed = 10.0, wave_width = 1.0, wave_height = 1.0, wave_r = 1.0
    // vec2 wave_uv = getWaveOffset(center * scalex_vec, vec2((center * scalex_vec).x, (v_uv0 * scalex_vec).y) , wave_width, wave_height, wave_speed, wave_r);


    // // 4、蝴蝶舞动翅膀 调参数 center = [0.5, 0.4], wave_speed = 10.0,wave_width = 0.1, wave_height = 1.0, wave_r = 1.0
    // vec2 wave_uv = getWaveOffset(center * scalex_vec, vec2((v_uv0 * scalex_vec).x, (center * scalex_vec).y) , wave_width, wave_height, wave_speed, wave_r);

    // // 5、竖条玻璃纹路 调参数 center = [0.5, 0.4], wave_speed = 10.0,wave_width = 100.0, wave_height = 1.0, wave_r = 1.0
    // vec2 wave_uv = getWaveOffset(center * scalex_vec, vec2((v_uv0 * scalex_vec).x, (center * scalex_vec).y) , wave_width, wave_height, wave_speed, wave_r);


    vec4 color = texture(texture, wave_uv);
    gl_FragColor = color;

  }
}%