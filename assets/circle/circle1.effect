// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        canvas_size: { value: [ 750.0, 1624.0 ] }

}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <cc-global>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif


  uniform ARGS {
    vec2 canvas_size;
  };

/** 
    画圆
    pos: 圆中心点位置
    r: 半径
    blur: 光圈
    uv: 视图点
  */
  float solidCircle(vec2 pos, float r, float blur, vec2 uv){
      float l = length(uv-pos);
      return smoothstep(r, r-blur, l);
  }
  /**
    * 画圈
    * pos: 中心点
    * r1: 外圈半径
    * r2: 内圈半径
    * uv: 点
  */
  float borderCircle(vec2 pos, float r1, float r2, float blur, vec2 uv ) {
    float s1 = solidCircle(pos, r1, blur, uv);
    float s2 = solidCircle(pos, r2, blur, uv);
    return s1 - s2;

  }

  vec3 blendNormal(vec3 base, vec3 blend) {
    return blend;
  }

  vec3 blendNormal(vec3 base, vec3 blend, float opacity) {
    return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));
  }

  float easeInExpo(float x) {
    return x == 0.0 ? 0.0 : pow(2., 10. * x - 10.);
  }

  float easeInOutCirc(float x) {
    return x < 0.5 ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2. : (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;
  }

  float easeOutCubic(float x) {
    return 1.0 - pow(1.0 - x, 3.0);
  }

  void main () {
		vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0); // 以y为单位长度

    vec4 circle_color = vec4(100., 200., 0., 255.);
    
    // 周期放大
    // float circle_speed = fract(cc_time.x);

    // 周期缩小
    // float circle_speed = 1. - fract(cc_time.x);

    // 时间从0-1-0周期变化
    // float circle_speed = abs(fract(cc_time.x-0.5) - 0.5);

    // 时间从0-1-1-1-0周期变化
    float circle_speed = clamp(abs(sin(cc_time.x)), 0., 0.5);


    
    float r = 0.2 * easeInOutCirc(circle_speed);

    float circleShape = borderCircle(vec2(0.48, 0.41) * scalex_vec, r, r - 0.01, 0.001, v_uv0 * scalex_vec);


    vec4 circleColorNormal = circle_color / 255.;

    vec4 circleColor = circleShape > 0.0 ? vec4(circleColorNormal.rgb, circleShape) : vec4(0.0);

    vec4 color = vec4(blendNormal(texture(texture, v_uv0).rgb, circleColor.rgb, circleColor.a), 1.);

    gl_FragColor = color;
  }


}%
