{
  "__type__": "cc.EffectAsset",
  "_name": "ripple1",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "canvas_size": {
              "value": [
                750,
                1624
              ],
              "type": 14
            },
            "center": {
              "value": [
                0.5,
                0.5
              ],
              "type": 14
            },
            "wave_speed": {
              "value": [
                10
              ],
              "type": 13
            },
            "wave_width": {
              "value": [
                1
              ],
              "type": 13
            },
            "wave_height": {
              "value": [
                0.1
              ],
              "type": 13
            },
            "wave_r": {
              "valur": 0.3,
              "type": 13
            }
          },
          "program": "ripple1|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 196777413,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform sampler2D lyrics_texture;\n  uniform ARGS{\n    vec2 center;\n    vec2 canvas_size;\n    float wave_speed;\n    float wave_height;\n    float wave_r;\n    float wave_width;\n  };\n    const float PI = 3.1415926;\n  vec2 getWaveOffset(vec2 center, vec2 uv, float wave_width, float wave_height, float wave_speed, float wave_r) {\n    vec2 distance_vec = center - uv;\n    float distance = length(center - uv);\n    float waveRFactor = clamp(wave_r - distance, 0.,1.) / wave_r;\n    float sin_factor = sin(distance * 100. * wave_width - cc_time.x * wave_speed) * 0.1 * wave_height * 1. / (1. + distance) * waveRFactor;\n    vec2 offset = normalize(distance_vec) * sin_factor;\n    vec2 result_uv = offset + v_uv0;\n    return result_uv;\n  }\n  void main() {\n    vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0);\n    vec2 wave_uv = getWaveOffset(center * scalex_vec, v_uv0 * scalex_vec , wave_width, wave_height, wave_speed, wave_r);\n    vec4 color = texture(texture, wave_uv);\n    gl_FragColor = color;\n  }"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform sampler2D lyrics_texture;\n  uniform vec2 center;\nuniform vec2 canvas_size;\nuniform float wave_speed;\nuniform float wave_height;\nuniform float wave_r;\nuniform float wave_width;\n    const float PI = 3.1415926;\n  vec2 getWaveOffset(vec2 center, vec2 uv, float wave_width, float wave_height, float wave_speed, float wave_r) {\n    vec2 distance_vec = center - uv;\n    float distance = length(center - uv);\n    float waveRFactor = clamp(wave_r - distance, 0.,1.) / wave_r;\n    float sin_factor = sin(distance * 100. * wave_width - cc_time.x * wave_speed) * 0.1 * wave_height * 1. / (1. + distance) * waveRFactor;\n    vec2 offset = normalize(distance_vec) * sin_factor;\n    vec2 result_uv = offset + v_uv0;\n    return result_uv;\n  }\n  void main() {\n    vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0);\n    vec2 wave_uv = getWaveOffset(center * scalex_vec, v_uv0 * scalex_vec , wave_width, wave_height, wave_speed, wave_r);\n    vec4 color = texture2D(texture, wave_uv);\n    gl_FragColor = color;\n  }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "binding": 0
        },
        {
          "name": "ARGS",
          "members": [
            {
              "name": "center",
              "type": 14,
              "count": 1
            },
            {
              "name": "canvas_size",
              "type": 14,
              "count": 1
            },
            {
              "name": "wave_speed",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_height",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_r",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_width",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 1
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        },
        {
          "name": "lyrics_texture",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 31
        }
      ],
      "record": null,
      "name": "ripple1|vs|fs"
    }
  ]
}