{
  "__type__": "cc.EffectAsset",
  "_name": "circle1",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "alphaThreshold": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "canvas_size": {
              "value": [
                750,
                1624
              ],
              "type": 14
            }
          },
          "program": "circle1|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 2328487438,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform ARGS {\n  vec2 canvas_size;\n};\nfloat solidCircle(vec2 pos, float r, float blur, vec2 uv){\n    float l = length(uv-pos);\n    return smoothstep(r, r-blur, l);\n}\nfloat borderCircle(vec2 pos, float r1, float r2, float blur, vec2 uv ) {\n  float s1 = solidCircle(pos, r1, blur, uv);\n  float s2 = solidCircle(pos, r2, blur, uv);\n  return s1 - s2;\n}\nvec3 blendNormal(vec3 base, vec3 blend) {\n  return blend;\n}\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n  return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\nfloat easeInOutCirc(float x) {\n  return x < 0.5 ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2. : (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;\n}\nvoid main () {\n  vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0);\n  vec4 circle_color = vec4(100., 200., 0., 255.);\n  float circle_speed = clamp(abs(sin(cc_time.x)), 0., 0.5);\n  float r = 0.2 * easeInOutCirc(circle_speed);\n  float circleShape = borderCircle(vec2(0.48, 0.41) * scalex_vec, r, r - 0.01, 0.001, v_uv0 * scalex_vec);\n  vec4 circleColorNormal = circle_color / 255.;\n  vec4 circleColor = circleShape > 0.0 ? vec4(circleColorNormal.rgb, circleShape) : vec4(0.0);\n  vec4 color = vec4(blendNormal(texture(texture, v_uv0).rgb, circleColor.rgb, circleColor.a), 1.);\n  gl_FragColor = color;\n}"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 canvas_size;\nfloat solidCircle(vec2 pos, float r, float blur, vec2 uv){\n    float l = length(uv-pos);\n    return smoothstep(r, r-blur, l);\n}\nfloat borderCircle(vec2 pos, float r1, float r2, float blur, vec2 uv ) {\n  float s1 = solidCircle(pos, r1, blur, uv);\n  float s2 = solidCircle(pos, r2, blur, uv);\n  return s1 - s2;\n}\nvec3 blendNormal(vec3 base, vec3 blend) {\n  return blend;\n}\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n  return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n}\nfloat easeInOutCirc(float x) {\n  return x < 0.5 ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2. : (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;\n}\nvoid main () {\n  vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0);\n  vec4 circle_color = vec4(100., 200., 0., 255.);\n  float circle_speed = clamp(abs(sin(cc_time.x)), 0., 0.5);\n  float r = 0.2 * easeInOutCirc(circle_speed);\n  float circleShape = borderCircle(vec2(0.48, 0.41) * scalex_vec, r, r - 0.01, 0.001, v_uv0 * scalex_vec);\n  vec4 circleColorNormal = circle_color / 255.;\n  vec4 circleColor = circleShape > 0.0 ? vec4(circleColorNormal.rgb, circleShape) : vec4(0.0);\n  vec4 color = vec4(blendNormal(texture2D(texture, v_uv0).rgb, circleColor.rgb, circleColor.a), 1.);\n  gl_FragColor = color;\n}"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "binding": 0
        },
        {
          "name": "ARGS",
          "members": [
            {
              "name": "canvas_size",
              "type": 14,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 1
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        }
      ],
      "record": null,
      "name": "circle1|vs|fs"
    }
  ]
}