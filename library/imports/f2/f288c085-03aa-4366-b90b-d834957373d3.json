{
  "__type__": "cc.EffectAsset",
  "_name": "ripple",
  "_objFlags": 0,
  "_native": "",
  "properties": null,
  "techniques": [
    {
      "passes": [
        {
          "blendState": {
            "targets": [
              {
                "blend": true
              }
            ]
          },
          "rasterizerState": {
            "cullMode": 0
          },
          "properties": {
            "texture": {
              "value": "white",
              "type": 29
            },
            "canvas_size": {
              "value": [
                750,
                1624
              ],
              "type": 14
            },
            "center": {
              "value": [
                0.5,
                0.5
              ],
              "type": 14
            },
            "wave_speed": {
              "value": [
                10
              ],
              "type": 13
            },
            "wave_width": {
              "value": [
                1
              ],
              "type": 13
            },
            "wave_height": {
              "value": [
                0.1
              ],
              "type": 13
            },
            "wave_r": {
              "valur": 0.3,
              "type": 13
            },
            "lyrics_wave_speed": {
              "value": [
                5
              ],
              "type": 13
            },
            "lyrics_wave_width": {
              "value": [
                0.1
              ],
              "type": 13
            },
            "lyrics_wave_height": {
              "value": [
                0.1
              ],
              "type": 13
            },
            "lyrics_wave_r": {
              "valur": 0.3,
              "type": 13
            },
            "lyrics_texture": {
              "value": "white",
              "type": 29
            },
            "lyrics_scale": {
              "value": [
                0.5
              ],
              "type": 13
            },
            "lyrics_time1": {
              "value": [
                0
              ],
              "type": 13
            },
            "lyrics_stay_time": {
              "value": [
                3
              ],
              "type": 13
            },
            "circle_center": {
              "value": [
                0.1,
                0.3
              ],
              "type": 14
            },
            "circle_time1": {
              "value": [
                0
              ],
              "type": 13
            },
            "circle_color": {
              "value": [
                124,
                255,
                137,
                255
              ],
              "type": 16
            },
            "lyrics_color": {
              "value": [
                124,
                255,
                137,
                255
              ],
              "type": 16
            },
            "circle_width": {
              "value": [
                0.002
              ],
              "type": 13
            },
            "wave_radius": {
              "value": [
                0.18
              ],
              "type": 13
            },
            "wave_offset": {
              "value": [
                2
              ],
              "type": 13
            }
          },
          "program": "ripple|vs|fs"
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 3323598081,
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform sampler2D lyrics_texture;\n  uniform ARGS{\n    vec4 circle_color;\n    vec4 lyrics_color;\n    vec2 center;\n    vec2 canvas_size;\n    vec2 circle_center;\n    float circle_time1;\n    float wave_speed;\n    float lyrics_wave_height;\n    float lyrics_wave_width;\n    float lyrics_wave_speed;\n    float lyrics_wave_r;\n    float lyrics_scale;\n    float lyrics_time1;\n    float lyrics_stay_time;\n    float wave_height;\n    float wave_r;\n    float wave_width;\n    float circle_width;\n    float wave_radius;\n    float wave_offset;\n  };\n  float solidCircle(vec2 pos, float r, float blur, vec2 uv){\n      float l = length(uv-pos);\n      return smoothstep(r, r-blur, l);\n  }\n  float borderCircle(vec2 pos, float r1, float r2, float blur, vec2 uv ) {\n    float s1 = solidCircle(pos, r1, blur, uv);\n    float s2 = solidCircle(pos, r2, blur, uv);\n    return s1 - s2;\n  }\n  vec3 blendNormal(vec3 base, vec3 blend) {\n    return blend;\n  }\n  vec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n    return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n  }\n    const float PI = 3.1415926;\n   float Guass(vec2 p, float sigma)\n   {\n    return ( 1./(2.*PI*sigma*sigma) )\n        *exp( -(p.x*p.x+p.y*p.y)/(2.*pow(sigma, 2.)) );\n   }\n  vec4 rgbaGaussianBlur(sampler2D Tex, vec2 UV, vec2 Size, float radius)\n    {\n      vec4 sum = vec4(0.0);\n      vec2 normalizedSize = vec2(1.0 / Size);\n      vec4 color = vec4(0.0);\n      float total_gauss = 0.0;\n      float sigma = radius;\n      for (float x = -10.0; x <= 10.0; x++) {\n          for (float y = -10.0; y <= 10.0; y++) {\n            float gauss = Guass(vec2(x, y), sigma);\n            sum += texture2D(Tex, UV + normalizedSize * vec2(x, y)) * gauss;\n            total_gauss += gauss;\n          }\n      }\n      sum = sum / total_gauss;\n      return vec4(1., 1., 1., sum.a);\n    }\n  float easeOutCubic(float x) {\n    return 1.0 - pow(1.0 - x, 3.0);\n  }\n  vec2 getWaveOffset(vec2 center, vec2 uv, float wave_width, float wave_height, float wave_speed, float wave_r) {\n    vec2 distance_vec = center - uv;\n    float distance = length(center - uv);\n    float waveRFactor = clamp(wave_r - distance, 0.,1.) / wave_r;\n    float sin_factor = sin(distance * 100. * wave_width - cc_time.x * wave_speed) * 0.1 * wave_height * 1. / (1. + distance) * waveRFactor;\n    vec2 offset = normalize(distance_vec) * sin_factor;\n    vec2 result_uv = offset + v_uv0;\n    return result_uv;\n  }\n  mat2 scale(vec2 scale){\n      return mat2(scale.x,0.0,\n                  0.0,scale.y);\n  }\n  vec2 getScaleUV(vec2 uv, vec2 center, float scaleFactor) {\n    vec2 st = uv - center;\n    st = scale(vec2(1. / scaleFactor)) * st;\n    st = st + center;\n    return st;\n  }\n  void main() {\n    vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0);\n    vec2 wave_uv = getWaveOffset(center * scalex_vec, v_uv0 * scalex_vec , wave_width, wave_height, wave_speed, wave_r);\n    float circle_speed = clamp(circle_time1, 0., 1.);\n    float r = circle_speed * 0.2;\n    float circleShape = borderCircle(circle_center, r, r - circle_width, 0.001, wave_uv * scalex_vec);\n    vec4 circleColorNormal = circle_color / 255.;\n    vec4 lyricsColorNormal = lyrics_color / 255.;\n    vec4 circleColor = circleShape > 0.0 ? vec4(circleColorNormal.rgb, (1. - circle_speed) * circleShape) : vec4(0.0);\n    float time = lyrics_time1;\n    float split = (lyrics_stay_time + 2.) / 2.;\n    float split_scale = 1.0 / split;\n    time = clamp(1.-abs(lyrics_time1/split-1.), 0., split_scale)/split_scale;\n    float lyrics_run_speed = clamp(1. - abs(time - 1.), 0., 0.99);\n    float lyrics_speed = easeOutCubic(lyrics_run_speed);\n    float alpha_lyrics_run_speed = clamp(1. - abs(time - 1.), 0.0, 1.0);\n    float lyrics_alpha_speed = easeOutCubic(alpha_lyrics_run_speed);\n    float disappear = lyrics_time1 < 2. + lyrics_stay_time ? 1.0 : 0.0;\n    vec2 wave_lyrics_uv = getWaveOffset(vec2(0.5, 0.5) * scalex_vec, v_uv0 * scalex_vec , lyrics_wave_width, lyrics_wave_height , lyrics_wave_speed, lyrics_wave_r*  clamp((1. - lyrics_speed), 0.1, 1.));\n    vec2 wave_scale_lyrics_uv = getScaleUV(wave_lyrics_uv, vec2(0.5, 0.2), (1. - lyrics_scale) * lyrics_speed + lyrics_scale);\n    vec4 blurLyricsColor = vec4(rgbaGaussianBlur(lyrics_texture, wave_scale_lyrics_uv, canvas_size, (1. - lyrics_speed)*10.).a);\n    blurLyricsColor = blurLyricsColor * vec4(disappear);\n    vec4 color = vec4(blendNormal(texture(texture, wave_uv).rgb, circleColor.rgb, circleColor.a), 1.);\n    vec4 lyricsShape = blurLyricsColor.a > 0.01 ? lyricsColorNormal : vec4(0.0);\n    color = vec4(blendNormal(color.rgb, lyricsShape.rgb, lyricsShape.a * alpha_lyrics_run_speed), 1.);\n    gl_FragColor = color;\n  }"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform sampler2D lyrics_texture;\n  uniform vec4 circle_color;\nuniform vec4 lyrics_color;\nuniform vec2 center;\nuniform vec2 canvas_size;\nuniform vec2 circle_center;\nuniform float circle_time1;\nuniform float wave_speed;\nuniform float lyrics_wave_height;\nuniform float lyrics_wave_width;\nuniform float lyrics_wave_speed;\nuniform float lyrics_wave_r;\nuniform float lyrics_scale;\nuniform float lyrics_time1;\nuniform float lyrics_stay_time;\nuniform float wave_height;\nuniform float wave_r;\nuniform float wave_width;\nuniform float circle_width;\n  float solidCircle(vec2 pos, float r, float blur, vec2 uv){\n      float l = length(uv-pos);\n      return smoothstep(r, r-blur, l);\n  }\n  float borderCircle(vec2 pos, float r1, float r2, float blur, vec2 uv ) {\n    float s1 = solidCircle(pos, r1, blur, uv);\n    float s2 = solidCircle(pos, r2, blur, uv);\n    return s1 - s2;\n  }\n  vec3 blendNormal(vec3 base, vec3 blend) {\n    return blend;\n  }\n  vec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n    return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n  }\n    const float PI = 3.1415926;\n   float Guass(vec2 p, float sigma)\n   {\n    return ( 1./(2.*PI*sigma*sigma) )\n        *exp( -(p.x*p.x+p.y*p.y)/(2.*pow(sigma, 2.)) );\n   }\n  vec4 rgbaGaussianBlur(sampler2D Tex, vec2 UV, vec2 Size, float radius)\n    {\n      vec4 sum = vec4(0.0);\n      vec2 normalizedSize = vec2(1.0 / Size);\n      vec4 color = vec4(0.0);\n      float total_gauss = 0.0;\n      float sigma = radius;\n      for (float x = -10.0; x <= 10.0; x++) {\n          for (float y = -10.0; y <= 10.0; y++) {\n            float gauss = Guass(vec2(x, y), sigma);\n            sum += texture2D(Tex, UV + normalizedSize * vec2(x, y)) * gauss;\n            total_gauss += gauss;\n          }\n      }\n      sum = sum / total_gauss;\n      return vec4(1., 1., 1., sum.a);\n    }\n  float easeOutCubic(float x) {\n    return 1.0 - pow(1.0 - x, 3.0);\n  }\n  vec2 getWaveOffset(vec2 center, vec2 uv, float wave_width, float wave_height, float wave_speed, float wave_r) {\n    vec2 distance_vec = center - uv;\n    float distance = length(center - uv);\n    float waveRFactor = clamp(wave_r - distance, 0.,1.) / wave_r;\n    float sin_factor = sin(distance * 100. * wave_width - cc_time.x * wave_speed) * 0.1 * wave_height * 1. / (1. + distance) * waveRFactor;\n    vec2 offset = normalize(distance_vec) * sin_factor;\n    vec2 result_uv = offset + v_uv0;\n    return result_uv;\n  }\n  mat2 scale(vec2 scale){\n      return mat2(scale.x,0.0,\n                  0.0,scale.y);\n  }\n  vec2 getScaleUV(vec2 uv, vec2 center, float scaleFactor) {\n    vec2 st = uv - center;\n    st = scale(vec2(1. / scaleFactor)) * st;\n    st = st + center;\n    return st;\n  }\n  void main() {\n    vec2 scalex_vec = vec2(canvas_size.x / canvas_size.y, 1.0);\n    vec2 wave_uv = getWaveOffset(center * scalex_vec, v_uv0 * scalex_vec , wave_width, wave_height, wave_speed, wave_r);\n    float circle_speed = clamp(circle_time1, 0., 1.);\n    float r = circle_speed * 0.2;\n    float circleShape = borderCircle(circle_center, r, r - circle_width, 0.001, wave_uv * scalex_vec);\n    vec4 circleColorNormal = circle_color / 255.;\n    vec4 lyricsColorNormal = lyrics_color / 255.;\n    vec4 circleColor = circleShape > 0.0 ? vec4(circleColorNormal.rgb, (1. - circle_speed) * circleShape) : vec4(0.0);\n    float time = lyrics_time1;\n    float split = (lyrics_stay_time + 2.) / 2.;\n    float split_scale = 1.0 / split;\n    time = clamp(1.-abs(lyrics_time1/split-1.), 0., split_scale)/split_scale;\n    float lyrics_run_speed = clamp(1. - abs(time - 1.), 0., 0.99);\n    float lyrics_speed = easeOutCubic(lyrics_run_speed);\n    float alpha_lyrics_run_speed = clamp(1. - abs(time - 1.), 0.0, 1.0);\n    float lyrics_alpha_speed = easeOutCubic(alpha_lyrics_run_speed);\n    float disappear = lyrics_time1 < 2. + lyrics_stay_time ? 1.0 : 0.0;\n    vec2 wave_lyrics_uv = getWaveOffset(vec2(0.5, 0.5) * scalex_vec, v_uv0 * scalex_vec , lyrics_wave_width, lyrics_wave_height , lyrics_wave_speed, lyrics_wave_r*  clamp((1. - lyrics_speed), 0.1, 1.));\n    vec2 wave_scale_lyrics_uv = getScaleUV(wave_lyrics_uv, vec2(0.5, 0.2), (1. - lyrics_scale) * lyrics_speed + lyrics_scale);\n    vec4 blurLyricsColor = vec4(rgbaGaussianBlur(lyrics_texture, wave_scale_lyrics_uv, canvas_size, (1. - lyrics_speed)*10.).a);\n    blurLyricsColor = blurLyricsColor * vec4(disappear);\n    vec4 color = vec4(blendNormal(texture2D(texture, wave_uv).rgb, circleColor.rgb, circleColor.a), 1.);\n    vec4 lyricsShape = blurLyricsColor.a > 0.01 ? lyricsColorNormal : vec4(0.0);\n    color = vec4(blendNormal(color.rgb, lyricsShape.rgb, lyricsShape.a * alpha_lyrics_run_speed), 1.);\n    gl_FragColor = color;\n  }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": []
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "USE_TEXTURE",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "CC_USE_MODEL",
          "type": "boolean",
          "defines": []
        },
        {
          "name": "USE_ALPHA_TEST",
          "type": "boolean",
          "defines": []
        }
      ],
      "blocks": [
        {
          "name": "ALPHA_TEST",
          "members": [
            {
              "name": "alphaThreshold",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [
            "USE_ALPHA_TEST"
          ],
          "binding": 0
        },
        {
          "name": "ARGS",
          "members": [
            {
              "name": "circle_color",
              "type": 16,
              "count": 1
            },
            {
              "name": "lyrics_color",
              "type": 16,
              "count": 1
            },
            {
              "name": "center",
              "type": 14,
              "count": 1
            },
            {
              "name": "canvas_size",
              "type": 14,
              "count": 1
            },
            {
              "name": "circle_center",
              "type": 14,
              "count": 1
            },
            {
              "name": "circle_time1",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_speed",
              "type": 13,
              "count": 1
            },
            {
              "name": "lyrics_wave_height",
              "type": 13,
              "count": 1
            },
            {
              "name": "lyrics_wave_width",
              "type": 13,
              "count": 1
            },
            {
              "name": "lyrics_wave_speed",
              "type": 13,
              "count": 1
            },
            {
              "name": "lyrics_wave_r",
              "type": 13,
              "count": 1
            },
            {
              "name": "lyrics_scale",
              "type": 13,
              "count": 1
            },
            {
              "name": "lyrics_time1",
              "type": 13,
              "count": 1
            },
            {
              "name": "lyrics_stay_time",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_height",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_r",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_width",
              "type": 13,
              "count": 1
            },
            {
              "name": "circle_width",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_radius",
              "type": 13,
              "count": 1
            },
            {
              "name": "wave_offset",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 1
        }
      ],
      "samplers": [
        {
          "name": "texture",
          "type": 29,
          "count": 1,
          "defines": [
            "USE_TEXTURE"
          ],
          "binding": 30
        },
        {
          "name": "lyrics_texture",
          "type": 29,
          "count": 1,
          "defines": [],
          "binding": 31
        }
      ],
      "record": null,
      "name": "ripple|vs|fs"
    }
  ]
}